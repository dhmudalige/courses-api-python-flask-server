# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re
from swagger_server import util


class Course(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, name: str=None, credits: int=None, core_or_elective: str=None, prerequisites: List[str]=None, course_content: str=None, objectives: str=None, il_os: object=None, allocation: str=None, modules: List[object]=None, references: List[str]=None, marks: object=None, lecturers: List[object]=None, url: str=None):  # noqa: E501
        """Course - a model defined in Swagger

        :param code: The code of this Course.  # noqa: E501
        :type code: str
        :param name: The name of this Course.  # noqa: E501
        :type name: str
        :param credits: The credits of this Course.  # noqa: E501
        :type credits: int
        :param core_or_elective: The core_or_elective of this Course.  # noqa: E501
        :type core_or_elective: str
        :param prerequisites: The prerequisites of this Course.  # noqa: E501
        :type prerequisites: List[str]
        :param course_content: The course_content of this Course.  # noqa: E501
        :type course_content: str
        :param objectives: The objectives of this Course.  # noqa: E501
        :type objectives: str
        :param il_os: The il_os of this Course.  # noqa: E501
        :type il_os: object
        :param allocation: The allocation of this Course.  # noqa: E501
        :type allocation: str
        :param modules: The modules of this Course.  # noqa: E501
        :type modules: List[object]
        :param references: The references of this Course.  # noqa: E501
        :type references: List[str]
        :param marks: The marks of this Course.  # noqa: E501
        :type marks: object
        :param lecturers: The lecturers of this Course.  # noqa: E501
        :type lecturers: List[object]
        :param url: The url of this Course.  # noqa: E501
        :type url: str
        """
        self.swagger_types = {
            'code': str,
            'name': str,
            'credits': int,
            'core_or_elective': str,
            'prerequisites': List[str],
            'course_content': str,
            'objectives': str,
            'il_os': object,
            'allocation': str,
            'modules': List[object],
            'references': List[str],
            'marks': object,
            'lecturers': List[object],
            'url': str
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name',
            'credits': 'credits',
            'core_or_elective': 'core_or_elective',
            'prerequisites': 'prerequisites',
            'course_content': 'course_content',
            'objectives': 'objectives',
            'il_os': 'ILOs',
            'allocation': 'allocation',
            'modules': 'modules',
            'references': 'references',
            'marks': 'marks',
            'lecturers': 'lecturers',
            'url': 'url'
        }

        self._code = code
        self._name = name
        self._credits = credits
        self._core_or_elective = core_or_elective
        self._prerequisites = prerequisites
        self._course_content = course_content
        self._objectives = objectives
        self._il_os = il_os
        self._allocation = allocation
        self._modules = modules
        self._references = references
        self._marks = marks
        self._lecturers = lecturers
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Course':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Course of this Course.  # noqa: E501
        :rtype: Course
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this Course.

        Course Code  # noqa: E501

        :return: The code of this Course.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Course.

        Course Code  # noqa: E501

        :param code: The code of this Course.
        :type code: str
        """
        if code is not None and not re.search(r'^[a-z]{2}d{3}$', code):  # noqa: E501
            raise ValueError("Invalid value for `code`, must be a follow pattern or equal to `/^[a-z]{2}d{3}$/`")  # noqa: E501

        self._code = code

    @property
    def name(self) -> str:
        """Gets the name of this Course.

        Course Name  # noqa: E501

        :return: The name of this Course.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Course.

        Course Name  # noqa: E501

        :param name: The name of this Course.
        :type name: str
        """

        self._name = name

    @property
    def credits(self) -> int:
        """Gets the credits of this Course.

        Credits  # noqa: E501

        :return: The credits of this Course.
        :rtype: int
        """
        return self._credits

    @credits.setter
    def credits(self, credits: int):
        """Sets the credits of this Course.

        Credits  # noqa: E501

        :param credits: The credits of this Course.
        :type credits: int
        """

        self._credits = credits

    @property
    def core_or_elective(self) -> str:
        """Gets the core_or_elective of this Course.

        Core or Elective  # noqa: E501

        :return: The core_or_elective of this Course.
        :rtype: str
        """
        return self._core_or_elective

    @core_or_elective.setter
    def core_or_elective(self, core_or_elective: str):
        """Sets the core_or_elective of this Course.

        Core or Elective  # noqa: E501

        :param core_or_elective: The core_or_elective of this Course.
        :type core_or_elective: str
        """

        self._core_or_elective = core_or_elective

    @property
    def prerequisites(self) -> List[str]:
        """Gets the prerequisites of this Course.

        Prerequisites  # noqa: E501

        :return: The prerequisites of this Course.
        :rtype: List[str]
        """
        return self._prerequisites

    @prerequisites.setter
    def prerequisites(self, prerequisites: List[str]):
        """Sets the prerequisites of this Course.

        Prerequisites  # noqa: E501

        :param prerequisites: The prerequisites of this Course.
        :type prerequisites: List[str]
        """

        self._prerequisites = prerequisites

    @property
    def course_content(self) -> str:
        """Gets the course_content of this Course.

        Course Contents  # noqa: E501

        :return: The course_content of this Course.
        :rtype: str
        """
        return self._course_content

    @course_content.setter
    def course_content(self, course_content: str):
        """Sets the course_content of this Course.

        Course Contents  # noqa: E501

        :param course_content: The course_content of this Course.
        :type course_content: str
        """

        self._course_content = course_content

    @property
    def objectives(self) -> str:
        """Gets the objectives of this Course.

        Objectives of the course  # noqa: E501

        :return: The objectives of this Course.
        :rtype: str
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives: str):
        """Sets the objectives of this Course.

        Objectives of the course  # noqa: E501

        :param objectives: The objectives of this Course.
        :type objectives: str
        """

        self._objectives = objectives

    @property
    def il_os(self) -> object:
        """Gets the il_os of this Course.


        :return: The il_os of this Course.
        :rtype: object
        """
        return self._il_os

    @il_os.setter
    def il_os(self, il_os: object):
        """Sets the il_os of this Course.


        :param il_os: The il_os of this Course.
        :type il_os: object
        """

        self._il_os = il_os

    @property
    def allocation(self) -> str:
        """Gets the allocation of this Course.

        Total time allocations for different sessions of the given course  # noqa: E501

        :return: The allocation of this Course.
        :rtype: str
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation: str):
        """Sets the allocation of this Course.

        Total time allocations for different sessions of the given course  # noqa: E501

        :param allocation: The allocation of this Course.
        :type allocation: str
        """

        self._allocation = allocation

    @property
    def modules(self) -> List[object]:
        """Gets the modules of this Course.

        Modules of a given course  # noqa: E501

        :return: The modules of this Course.
        :rtype: List[object]
        """
        return self._modules

    @modules.setter
    def modules(self, modules: List[object]):
        """Sets the modules of this Course.

        Modules of a given course  # noqa: E501

        :param modules: The modules of this Course.
        :type modules: List[object]
        """

        self._modules = modules

    @property
    def references(self) -> List[str]:
        """Gets the references of this Course.

        Useful reference materials of the given course  # noqa: E501

        :return: The references of this Course.
        :rtype: List[str]
        """
        return self._references

    @references.setter
    def references(self, references: List[str]):
        """Sets the references of this Course.

        Useful reference materials of the given course  # noqa: E501

        :param references: The references of this Course.
        :type references: List[str]
        """

        self._references = references

    @property
    def marks(self) -> object:
        """Gets the marks of this Course.

        Marks allocated for different sessions of the given course  # noqa: E501

        :return: The marks of this Course.
        :rtype: object
        """
        return self._marks

    @marks.setter
    def marks(self, marks: object):
        """Sets the marks of this Course.

        Marks allocated for different sessions of the given course  # noqa: E501

        :param marks: The marks of this Course.
        :type marks: object
        """

        self._marks = marks

    @property
    def lecturers(self) -> List[object]:
        """Gets the lecturers of this Course.

        Lecturers of the given course  # noqa: E501

        :return: The lecturers of this Course.
        :rtype: List[object]
        """
        return self._lecturers

    @lecturers.setter
    def lecturers(self, lecturers: List[object]):
        """Sets the lecturers of this Course.

        Lecturers of the given course  # noqa: E501

        :param lecturers: The lecturers of this Course.
        :type lecturers: List[object]
        """

        self._lecturers = lecturers

    @property
    def url(self) -> str:
        """Gets the url of this Course.

        URL for the course details  # noqa: E501

        :return: The url of this Course.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Course.

        URL for the course details  # noqa: E501

        :param url: The url of this Course.
        :type url: str
        """

        self._url = url
